--- !ruby/object:RI::ClassDescription 
attributes: 
  - !ruby/object:RI::Attribute 
    comment: 
      - !ruby/struct:SM::Flow::P 
        body: Accessors for setting security restrictions.
      - !ruby/struct:SM::Flow::P 
        body: This is a nice thing if you're using RedCloth for formatting in public places (e.g. Wikis) where you don't want users to abuse HTML for bad things.
      - !ruby/struct:SM::Flow::P 
        body: If +:filter_html+ is set, HTML which wasn't created by the Textile processor will be escaped. Alternatively, if +:sanitize_html+ is set, HTML can pass through the Textile processor but unauthorized tags and attributes will be removed.
      - !ruby/struct:SM::Flow::P 
        body: "If +:filter_styles+ is set, it will also disable the style markup specifier. ('{color: red}')"
      - !ruby/struct:SM::Flow::P 
        body: If +:filter_classes+ is set, it will also disable class attributes. ('!(classname)image!')
      - !ruby/struct:SM::Flow::P 
        body: If +:filter_ids+ is set, it will also disable id attributes. ('!(classname#id)image!')
    name: filter_classes
    rw: RW
  - !ruby/object:RI::Attribute 
    comment: 
      - !ruby/struct:SM::Flow::P 
        body: Accessors for setting security restrictions.
      - !ruby/struct:SM::Flow::P 
        body: This is a nice thing if you're using RedCloth for formatting in public places (e.g. Wikis) where you don't want users to abuse HTML for bad things.
      - !ruby/struct:SM::Flow::P 
        body: If +:filter_html+ is set, HTML which wasn't created by the Textile processor will be escaped. Alternatively, if +:sanitize_html+ is set, HTML can pass through the Textile processor but unauthorized tags and attributes will be removed.
      - !ruby/struct:SM::Flow::P 
        body: "If +:filter_styles+ is set, it will also disable the style markup specifier. ('{color: red}')"
      - !ruby/struct:SM::Flow::P 
        body: If +:filter_classes+ is set, it will also disable class attributes. ('!(classname)image!')
      - !ruby/struct:SM::Flow::P 
        body: If +:filter_ids+ is set, it will also disable id attributes. ('!(classname#id)image!')
    name: filter_classes
    rw: RW
  - !ruby/object:RI::Attribute 
    comment: 
      - !ruby/struct:SM::Flow::P 
        body: Accessors for setting security restrictions.
      - !ruby/struct:SM::Flow::P 
        body: This is a nice thing if you're using RedCloth for formatting in public places (e.g. Wikis) where you don't want users to abuse HTML for bad things.
      - !ruby/struct:SM::Flow::P 
        body: If +:filter_html+ is set, HTML which wasn't created by the Textile processor will be escaped. Alternatively, if +:sanitize_html+ is set, HTML can pass through the Textile processor but unauthorized tags and attributes will be removed.
      - !ruby/struct:SM::Flow::P 
        body: "If +:filter_styles+ is set, it will also disable the style markup specifier. ('{color: red}')"
      - !ruby/struct:SM::Flow::P 
        body: If +:filter_classes+ is set, it will also disable class attributes. ('!(classname)image!')
      - !ruby/struct:SM::Flow::P 
        body: If +:filter_ids+ is set, it will also disable id attributes. ('!(classname#id)image!')
    name: filter_html
    rw: RW
  - !ruby/object:RI::Attribute 
    comment: 
      - !ruby/struct:SM::Flow::P 
        body: Accessors for setting security restrictions.
      - !ruby/struct:SM::Flow::P 
        body: This is a nice thing if you're using RedCloth for formatting in public places (e.g. Wikis) where you don't want users to abuse HTML for bad things.
      - !ruby/struct:SM::Flow::P 
        body: If +:filter_html+ is set, HTML which wasn't created by the Textile processor will be escaped. Alternatively, if +:sanitize_html+ is set, HTML can pass through the Textile processor but unauthorized tags and attributes will be removed.
      - !ruby/struct:SM::Flow::P 
        body: "If +:filter_styles+ is set, it will also disable the style markup specifier. ('{color: red}')"
      - !ruby/struct:SM::Flow::P 
        body: If +:filter_classes+ is set, it will also disable class attributes. ('!(classname)image!')
      - !ruby/struct:SM::Flow::P 
        body: If +:filter_ids+ is set, it will also disable id attributes. ('!(classname#id)image!')
    name: filter_html
    rw: RW
  - !ruby/object:RI::Attribute 
    comment: 
      - !ruby/struct:SM::Flow::P 
        body: Accessors for setting security restrictions.
      - !ruby/struct:SM::Flow::P 
        body: This is a nice thing if you're using RedCloth for formatting in public places (e.g. Wikis) where you don't want users to abuse HTML for bad things.
      - !ruby/struct:SM::Flow::P 
        body: If +:filter_html+ is set, HTML which wasn't created by the Textile processor will be escaped. Alternatively, if +:sanitize_html+ is set, HTML can pass through the Textile processor but unauthorized tags and attributes will be removed.
      - !ruby/struct:SM::Flow::P 
        body: "If +:filter_styles+ is set, it will also disable the style markup specifier. ('{color: red}')"
      - !ruby/struct:SM::Flow::P 
        body: If +:filter_classes+ is set, it will also disable class attributes. ('!(classname)image!')
      - !ruby/struct:SM::Flow::P 
        body: If +:filter_ids+ is set, it will also disable id attributes. ('!(classname#id)image!')
    name: filter_ids
    rw: RW
  - !ruby/object:RI::Attribute 
    comment: 
      - !ruby/struct:SM::Flow::P 
        body: Accessors for setting security restrictions.
      - !ruby/struct:SM::Flow::P 
        body: This is a nice thing if you're using RedCloth for formatting in public places (e.g. Wikis) where you don't want users to abuse HTML for bad things.
      - !ruby/struct:SM::Flow::P 
        body: If +:filter_html+ is set, HTML which wasn't created by the Textile processor will be escaped. Alternatively, if +:sanitize_html+ is set, HTML can pass through the Textile processor but unauthorized tags and attributes will be removed.
      - !ruby/struct:SM::Flow::P 
        body: "If +:filter_styles+ is set, it will also disable the style markup specifier. ('{color: red}')"
      - !ruby/struct:SM::Flow::P 
        body: If +:filter_classes+ is set, it will also disable class attributes. ('!(classname)image!')
      - !ruby/struct:SM::Flow::P 
        body: If +:filter_ids+ is set, it will also disable id attributes. ('!(classname#id)image!')
    name: filter_ids
    rw: RW
  - !ruby/object:RI::Attribute 
    comment: 
      - !ruby/struct:SM::Flow::P 
        body: Accessors for setting security restrictions.
      - !ruby/struct:SM::Flow::P 
        body: This is a nice thing if you're using RedCloth for formatting in public places (e.g. Wikis) where you don't want users to abuse HTML for bad things.
      - !ruby/struct:SM::Flow::P 
        body: If +:filter_html+ is set, HTML which wasn't created by the Textile processor will be escaped. Alternatively, if +:sanitize_html+ is set, HTML can pass through the Textile processor but unauthorized tags and attributes will be removed.
      - !ruby/struct:SM::Flow::P 
        body: "If +:filter_styles+ is set, it will also disable the style markup specifier. ('{color: red}')"
      - !ruby/struct:SM::Flow::P 
        body: If +:filter_classes+ is set, it will also disable class attributes. ('!(classname)image!')
      - !ruby/struct:SM::Flow::P 
        body: If +:filter_ids+ is set, it will also disable id attributes. ('!(classname#id)image!')
    name: filter_styles
    rw: RW
  - !ruby/object:RI::Attribute 
    comment: 
      - !ruby/struct:SM::Flow::P 
        body: Accessors for setting security restrictions.
      - !ruby/struct:SM::Flow::P 
        body: This is a nice thing if you're using RedCloth for formatting in public places (e.g. Wikis) where you don't want users to abuse HTML for bad things.
      - !ruby/struct:SM::Flow::P 
        body: If +:filter_html+ is set, HTML which wasn't created by the Textile processor will be escaped. Alternatively, if +:sanitize_html+ is set, HTML can pass through the Textile processor but unauthorized tags and attributes will be removed.
      - !ruby/struct:SM::Flow::P 
        body: "If +:filter_styles+ is set, it will also disable the style markup specifier. ('{color: red}')"
      - !ruby/struct:SM::Flow::P 
        body: If +:filter_classes+ is set, it will also disable class attributes. ('!(classname)image!')
      - !ruby/struct:SM::Flow::P 
        body: If +:filter_ids+ is set, it will also disable id attributes. ('!(classname#id)image!')
    name: filter_styles
    rw: RW
  - !ruby/object:RI::Attribute 
    comment: 
      - !ruby/struct:SM::Flow::P 
        body: Deprecated accessor for toggling hard breaks.
      - !ruby/struct:SM::Flow::P 
        body: Traditional RedCloth converted single newlines to HTML break tags, but later versions required +:hard_breaks+ be set to enable this behavior. +:hard_breaks+ is once again the default.
    name: hard_breaks
    rw: RW
  - !ruby/object:RI::Attribute 
    comment: 
      - !ruby/struct:SM::Flow::P 
        body: Deprecated accessor for toggling hard breaks.
      - !ruby/struct:SM::Flow::P 
        body: Traditional RedCloth converted single newlines to HTML break tags, but later versions required +:hard_breaks+ be set to enable this behavior. +:hard_breaks+ is once again the default.
    name: hard_breaks
    rw: RW
  - !ruby/object:RI::Attribute 
    comment: 
      - !ruby/struct:SM::Flow::P 
        body: Accessor for toggling lite mode.
      - !ruby/struct:SM::Flow::P 
        body: In lite mode, block-level rules are ignored. This means that tables, paragraphs, lists, and such aren't available. Only the inline markup for bold, italics, entities and so on.
      - !ruby/struct:SM::Flow::VERB 
        body: "  r = RedCloth.new( &quot;And then? She <b>fell</b>!&quot;, [:lite_mode] )\n  r.to_html\n  #=&gt; &quot;And then? She &lt;strong&gt;fell&lt;/strong&gt;!&quot;\n"
    name: lite_mode
    rw: RW
  - !ruby/object:RI::Attribute 
    comment: 
      - !ruby/struct:SM::Flow::P 
        body: Accessor for toggling lite mode.
      - !ruby/struct:SM::Flow::P 
        body: In lite mode, block-level rules are ignored. This means that tables, paragraphs, lists, and such aren't available. Only the inline markup for bold, italics, entities and so on.
      - !ruby/struct:SM::Flow::VERB 
        body: "  r = RedCloth.new( &quot;And then? She <b>fell</b>!&quot;, [:lite_mode] )\n  r.to_html\n  #=&gt; &quot;And then? She &lt;strong&gt;fell&lt;/strong&gt;!&quot;\n"
    name: lite_mode
    rw: RW
  - !ruby/object:RI::Attribute 
    comment: 
      - !ruby/struct:SM::Flow::P 
        body: Accessor for toggling span caps.
      - !ruby/struct:SM::Flow::P 
        body: Textile places `span' tags around capitalized words by default, but this wreaks havoc on Wikis. If +:no_span_caps+ is set, this will be suppressed.
    name: no_span_caps
    rw: RW
  - !ruby/object:RI::Attribute 
    comment: 
      - !ruby/struct:SM::Flow::P 
        body: Accessor for toggling span caps.
      - !ruby/struct:SM::Flow::P 
        body: Textile places `span' tags around capitalized words by default, but this wreaks havoc on Wikis. If +:no_span_caps+ is set, this will be suppressed.
    name: no_span_caps
    rw: RW
  - !ruby/object:RI::Attribute 
    comment: 
      - !ruby/struct:SM::Flow::P 
        body: Accessors for setting security restrictions.
      - !ruby/struct:SM::Flow::P 
        body: This is a nice thing if you're using RedCloth for formatting in public places (e.g. Wikis) where you don't want users to abuse HTML for bad things.
      - !ruby/struct:SM::Flow::P 
        body: If +:filter_html+ is set, HTML which wasn't created by the Textile processor will be escaped. Alternatively, if +:sanitize_html+ is set, HTML can pass through the Textile processor but unauthorized tags and attributes will be removed.
      - !ruby/struct:SM::Flow::P 
        body: "If +:filter_styles+ is set, it will also disable the style markup specifier. ('{color: red}')"
      - !ruby/struct:SM::Flow::P 
        body: If +:filter_classes+ is set, it will also disable class attributes. ('!(classname)image!')
      - !ruby/struct:SM::Flow::P 
        body: If +:filter_ids+ is set, it will also disable id attributes. ('!(classname#id)image!')
    name: sanitize_html
    rw: RW
  - !ruby/object:RI::Attribute 
    comment: 
      - !ruby/struct:SM::Flow::P 
        body: Accessors for setting security restrictions.
      - !ruby/struct:SM::Flow::P 
        body: This is a nice thing if you're using RedCloth for formatting in public places (e.g. Wikis) where you don't want users to abuse HTML for bad things.
      - !ruby/struct:SM::Flow::P 
        body: If +:filter_html+ is set, HTML which wasn't created by the Textile processor will be escaped. Alternatively, if +:sanitize_html+ is set, HTML can pass through the Textile processor but unauthorized tags and attributes will be removed.
      - !ruby/struct:SM::Flow::P 
        body: "If +:filter_styles+ is set, it will also disable the style markup specifier. ('{color: red}')"
      - !ruby/struct:SM::Flow::P 
        body: If +:filter_classes+ is set, it will also disable class attributes. ('!(classname)image!')
      - !ruby/struct:SM::Flow::P 
        body: If +:filter_ids+ is set, it will also disable id attributes. ('!(classname#id)image!')
    name: sanitize_html
    rw: RW
class_methods: 
  - !ruby/object:RI::MethodSummary 
    name: new
  - !ruby/object:RI::MethodSummary 
    name: new
comment: 
constants: []

full_name: RedCloth::TextileDoc
includes: []

instance_methods: 
  - !ruby/object:RI::MethodSummary 
    name: to_html
  - !ruby/object:RI::MethodSummary 
    name: to_html
  - !ruby/object:RI::MethodSummary 
    name: to_latex
  - !ruby/object:RI::MethodSummary 
    name: to_latex
name: TextileDoc
superclass: String
