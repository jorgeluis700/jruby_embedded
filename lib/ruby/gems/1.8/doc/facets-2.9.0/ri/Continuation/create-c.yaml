--- !ruby/object:RI::MethodDescription 
aliases: []

block_params: 
comment: 
  - !ruby/struct:SM::Flow::H 
    level: 1
    text: Continuation Extension
  - !ruby/struct:SM::Flow::P 
    body: Creates a continuation in a way that is easier to use than callcc. On the initial call this will return the created Continuation and the arguments you gave to Continuation.create in an Array. If you then issue .call() on the Continuation execution will jump back to the point of time where you initially invoked Continuation.create, but this time it will return the Continuation and the arguments you supplied in an Array.
  - !ruby/struct:SM::Flow::P 
    body: You can supply a block instead of default arguments which will cause that block to be executed once and its result to be returned along side the created Continuation, but this form is confusing and does only rarely make sense.
  - !ruby/struct:SM::Flow::VERB 
    body: "  # Count from 0 to 10\n  cc, counter = Continuation.create(0)\n  counter   #~&gt; 0..10\n  cc.call(counter + 1) if counter &lt; 10\n\n  # Implement something similar to Array#inject using Continuations.\n  # For simplicity's sake, this is not fully compatible with the real\n  # inject. Make sure that you understand Array#inject before you try\n  # to understand this.\n  class ::Array\n    def cc_inject(value = nil)\n      copy = self.clone\n      cc, result, item = Continuation.create(value, nil)\n      next_item = copy.shift\n      if result and item\n        # Aggregate the result using the block.\n        cc.call(yield(result, item), next_item)\n      elsif next_item\n        # item not yet set and Array is not empty:\n        # This means we did not get a value and thus need to use the\n        # first item from the Array before we can start using the\n        # block to aggregate the result.\n        cc.call(next_item, result)\n      end\n\n      return result\n   end\n end\n [1,2,3,4,5].cc_inject { |acc, n| acc + n } # =&gt; 15\n"
full_name: Continuation::create
is_singleton: true
name: create
params: (*args, &block)
visibility: public
