--- !ruby/object:RI::MethodDescription 
aliases: []

block_params: (output, *input)
comment: 
  - !ruby/struct:SM::Flow::P 
    body: "Without a block: wrap the Enumerable object in such a way that map, select and similar operations are performed &quot;horizontally&quot; across a series of blocks, instead of building an array of results at each step. This reduces memory usage, allows partial results to be provided early, and permits working with infinite series."
  - !ruby/struct:SM::Flow::VERB 
    body: "  a = (1..1_000_000_000).defer.select{ |i| i % 2 == 0 }.\n                               map{ |i| i + 100 }.\n                               take(10).to_a\n"
  - !ruby/struct:SM::Flow::P 
    body: "With a block: the block acts as an arbitrary filter on the data. Unlike map, it can choose to drop elements from the result, and/or add additional ones. The first object passed to the block is the receiver of the output."
  - !ruby/struct:SM::Flow::VERB 
    body: "  (1..1_000_000_000).\n    defer { |out,i| out &lt;&lt; i if i % 2 == 0 }.  # like select\n    defer { |out,i| out &lt;&lt; i + 100 }.          # like map\n    take(10).to_a\n"
  - !ruby/struct:SM::Flow::P 
    body: Use a method like to_a or to_h at the end of the chain when you want an Array or Hash built with the results, or each{...} if you just want to output each result and discard it.
full_name: Enumerable#defer
is_singleton: false
name: defer
params: (&blk) {|output, *input| ...}
visibility: public
