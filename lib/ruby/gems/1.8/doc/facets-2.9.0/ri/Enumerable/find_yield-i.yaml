--- !ruby/object:RI::MethodDescription 
aliases: 
  - !ruby/object:RI::AliasName 
    name: map_detect
block_params: ""
comment: 
  - !ruby/struct:SM::Flow::P 
    body: "Yield each element to the block and return the result of the block when that result evaluates as true, terminating early like #detect and #find."
  - !ruby/struct:SM::Flow::VERB 
    body: "  obj1 = Object.new\n  obj2 = Object.new\n\n  def obj1.foo?; false; end\n  def obj2.foo?; true ; end\n\n  def obj1.foo ; &quot;foo1&quot;; end\n  def obj2.foo ; &quot;foo2&quot;; end\n\n  [obj1, obj2].find_yield{ |obj| obj.foo if obj.foo? }  #=&gt; &quot;foo2&quot;\n"
  - !ruby/struct:SM::Flow::P 
    body: Another example.
  - !ruby/struct:SM::Flow::VERB 
    body: "  [1,2,3,4,5].find_yield{ |i| j = i+1; j if j % 4 == 0 }  #=&gt; 4\n"
  - !ruby/struct:SM::Flow::P 
    body: If the block is never true, return the object given in the first parameter, or nil if none specified.
  - !ruby/struct:SM::Flow::VERB 
    body: "  [1,2,3].find_yield{ |_| false }    #=&gt; nil\n  [false].find_yield(1){ |_| false } #=&gt; 1\n"
full_name: Enumerable#find_yield
is_singleton: false
name: find_yield
params: (fallback=nil) {|| ...}
visibility: public
