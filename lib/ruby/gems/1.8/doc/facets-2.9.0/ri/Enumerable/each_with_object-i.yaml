--- !ruby/object:RI::MethodDescription 
aliases: []

block_params: ""
comment: 
  - !ruby/struct:SM::Flow::P 
    body: "A variation of #inject that saves one from having to return the aggregate/memo argument."
  - !ruby/struct:SM::Flow::P 
    body: "Say we want to count characters in a string. Using the #each_with_object method we have:"
  - !ruby/struct:SM::Flow::VERB 
    body: "   &quot;string&quot;.each_with_object(Hash.new(0)) do |c, h|\n     h[c] += 1\n   end\n"
  - !ruby/struct:SM::Flow::P 
    body: "versus using #inject which would be:"
  - !ruby/struct:SM::Flow::VERB 
    body: "   &quot;string&quot;.inject(Hash.new(0)) do |h, c|\n     h[c] +=1\n     h\n   end\n"
  - !ruby/struct:SM::Flow::P 
    body: Notice that the order of the block parameters is reversed.
  - !ruby/struct:SM::Flow::P 
    body: "This method used be called #injecting and had the same parameter order as #inject, but Ruby 1.9 has adopted this method, so we support it instead."
full_name: Enumerable#each_with_object
is_singleton: false
name: each_with_object
params: (memo) {|| ...}
visibility: public
