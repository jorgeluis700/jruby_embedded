--- !ruby/object:RI::ClassDescription 
attributes: []

class_methods: 
  - !ruby/object:RI::MethodSummary 
    name: append_features
  - !ruby/object:RI::MethodSummary 
    name: cache
comment: 
  - !ruby/struct:SM::Flow::P 
    body: Memoization is an optimization technique used primarily to speed up programs by having function calls avoid repeating the calculation of results for previously-processed inputs.
  - !ruby/struct:SM::Flow::P 
    body: When you &quot;memoize&quot; a method/function using Memoizable its results are cached so that later calls return results from the cache instead of recalculating them.
  - !ruby/struct:SM::Flow::VERB 
    body: "  class T\n    include Memoizable\n\n    def initialize(a)\n      @a = a\n    end\n\n    def a\n      &quot;#{@a ^ 3 + 4}&quot;\n    end\n\n    memoize :a\n  end\n\n  t = T.new(10)\n  (t.a.<em>id</em> == t.a.<em>id</em>)  #=&gt; true\n"
  - !ruby/struct:SM::Flow::P 
    body: This method can also be used at the instance level to cache singleton (qua class) methods by including it in the singleton class.
constants: []

full_name: Memoizable
includes: []

instance_methods: 
  - !ruby/object:RI::MethodSummary 
    name: memoize
  - !ruby/object:RI::MethodSummary 
    name: rememoize
  - !ruby/object:RI::MethodSummary 
    name: unmemoize
name: Memoizable
superclass: 
