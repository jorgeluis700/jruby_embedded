--- !ruby/object:RI::MethodDescription 
aliases: []

block_params: (i, *slice(i,2))
comment: 
  - !ruby/struct:SM::Flow::P 
    body: "This is more advanced form of #join. It allows for fine control of separators."
  - !ruby/struct:SM::Flow::P 
    body: "NOTE: The old version used to default its separator to &quot;, &quot; and default the terminating separator to &quot; and &quot;. This is no longer the case. You must specifically provide these parameters."
  - !ruby/struct:SM::Flow::P 
    body: "If no paramters are given, it acts like #join but will a space separator."
  - !ruby/struct:SM::Flow::VERB 
    body: "  [1,2,3].conjoin\n  #=&gt; &quot;1 2 3&quot;\n"
  - !ruby/struct:SM::Flow::P 
    body: Use comma+space and 'and' on tail.
  - !ruby/struct:SM::Flow::VERB 
    body: "  [1,2,3].conjoin(', ', ' and ')\n  #=&gt; &quot;1, 2 and 3&quot;\n"
  - !ruby/struct:SM::Flow::P 
    body: Use comma+space and 'or' on tail using :last option.
  - !ruby/struct:SM::Flow::VERB 
    body: "  [1,2,3].conjoin(', ', :last =&gt; ' or ')\n  #=&gt; &quot;1, 2 or 3&quot;\n"
  - !ruby/struct:SM::Flow::P 
    body: Use semicolon+space and ampersand on tail using index.
  - !ruby/struct:SM::Flow::VERB 
    body: "  [1,2,3].conjoin('; ', -1 =&gt; ' &amp; ')\n  #=&gt; &quot;1; 2 &amp; 3&quot;\n"
  - !ruby/struct:SM::Flow::P 
    body: Can take a block to determine separator.
  - !ruby/struct:SM::Flow::VERB 
    body: "  [1,2,3,4].conjoin{ |i, a, b| i % 2 == 0 ? '.' : '-' }\n  #=&gt; &quot;1.2-3.4&quot;\n"
  - !ruby/struct:SM::Flow::P 
    body: This makes very esoteric transformation possible.
  - !ruby/struct:SM::Flow::VERB 
    body: "  [1,1,2,2].conjoin{ |i, a, b| a == b ? '=' : ' != ' }\n  #=&gt; &quot;1=1 != 2=2&quot;\n\n  [1,2,3,4].conjoin{ |i, x, y| &quot;&lt;#{i} #{x} #{y}&gt;&quot; }\n  #=&gt; &quot;1&lt;0 1 2&gt;2&lt;1 2 3&gt;3&lt;2 3 4&gt;4&quot;\n"
  - !ruby/struct:SM::Flow::P 
    body: There are also spacing options. Providing the :space option pads the separators.
  - !ruby/struct:SM::Flow::VERB 
    body: "  [1,2,3].conjoin(',', '&amp;', :space=&gt;2)\n  #=&gt; &quot;1  ,  2  &amp;  3&quot;\n"
  - !ruby/struct:SM::Flow::P 
    body: And the :spacer option can set an alternate spacing string.
  - !ruby/struct:SM::Flow::VERB 
    body: "  [1,2,3].conjoin('|', '&gt;', :space=&gt;2, :spacer=&gt;'-')\n  #=&gt; &quot;1--|--2--&gt;--3&quot;\n"
  - !ruby/struct:SM::Flow::P 
    body: "CREDIT: Trans"
full_name: Array#conjoin
is_singleton: false
name: conjoin
params: (*args, &block) {|i, *slice(i,2)| ...}
visibility: public
