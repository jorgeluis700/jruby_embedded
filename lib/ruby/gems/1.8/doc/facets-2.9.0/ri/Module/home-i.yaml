--- !ruby/object:RI::MethodDescription 
aliases: []

block_params: 
comment: 
  - !ruby/struct:SM::Flow::P 
    body: Returns the module or class containing the receiver.
  - !ruby/struct:SM::Flow::VERB 
    body: "  module ::HomeExample\n    module M\n      module N\n      end\n    end\n  end\n\n  HomeExample::M::N.home  #=&gt; HomeExample::M\n"
  - !ruby/struct:SM::Flow::P 
    body: The home of a top-level module/class is Object.
  - !ruby/struct:SM::Flow::VERB 
    body: "  HomeExample.home   #=&gt; Object\n"
  - !ruby/struct:SM::Flow::P 
    body: "This method is called <b>home</b> because techinally a module or class is just a constant reference, and as such can reside with multiple namespaces, like any variable. For example:"
  - !ruby/struct:SM::Flow::VERB 
    body: "  module OtherPlace\n    M = ::HomeExample::M\n  end\n"
  - !ruby/struct:SM::Flow::P 
    body: In this example, you might think that +OtherPlace::M+'s home would be <tt>OtherPlace</tt>, but +OtherPlace::M+ is the same object as +HomeExample::M+, and it can have only one &quot;home&quot; --the original location of it's definition.
full_name: Module#home
is_singleton: false
name: home
params: ()
visibility: public
