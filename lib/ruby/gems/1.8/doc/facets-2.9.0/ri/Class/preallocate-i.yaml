--- !ruby/object:RI::MethodDescription 
aliases: []

block_params: 
comment: 
  - !ruby/struct:SM::Flow::P 
    body: Designate aspect modules to be added to a object at instantiation.
  - !ruby/struct:SM::Flow::VERB 
    body: "  class Firetruck\n    def put_out_fire(option)\n      &quot;Put out #{option}&quot;\n    end\n  end\n\n  module FastFiretruck\n    def put_out_fire(option)\n      super(&quot;very #{option}!&quot;)\n    end\n  end\n\n  Firetruck.preallocate(FastFiretruck)\n\n  ft = Firetruck.new\n  ft.put_out_fire('fast') #=&gt; &quot;Put out very fast!&quot;\n"
  - !ruby/struct:SM::Flow::P 
    body: "This method is very similar to the idea of #prepend, but it has some limitations in that it works by overriding #new and #allocate and extends an object with the aspect modules on instantiation. A true #prepend implementation would not have to do this --but would be a natural part of the class heirarchy instead. For this reason, this method has been named #preallocate, rather than #prepend."
  - !ruby/struct:SM::Flow::P 
    body: "CREDIT: Trans"
full_name: Class#preallocate
is_singleton: false
name: preallocate
params: (aspect)
visibility: public
