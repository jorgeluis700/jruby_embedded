--- !ruby/object:RI::MethodDescription 
aliases: []

block_params: 
comment: 
  - !ruby/struct:SM::Flow::P 
    body: Levenshtein distance algorithm implementation for Ruby, with UTF-8 support.
  - !ruby/struct:SM::Flow::P 
    body: The Levenshtein distance is a measure of how similar two strings s and t are, calculated as the number of deletions/insertions/substitutions needed to transform s into t. The greater the distance, the more the strings differ.
  - !ruby/struct:SM::Flow::P 
    body: The Levenshtein distance is also sometimes referred to as the easier-to-pronounce-and-spell 'edit distance'.
  - !ruby/struct:SM::Flow::P 
    body: Calculate the Levenshtein distance between two strings <tt>self</tt> and +str2+. <tt>self</tt> and +str2+ should be ASCII, UTF-8, or a one-byte-per character encoding such as ISO-8859-*.
  - !ruby/struct:SM::Flow::P 
    body: The strings will be treated as UTF-8 if $KCODE is set appropriately (i.e. 'u'). Otherwise, the comparison will be performed byte-by-byte. There is no specific support for Shift-JIS or EUC strings.
  - !ruby/struct:SM::Flow::P 
    body: When using Unicode text, be aware that this algorithm does not perform normalisation. If there is a possibility of different normalised forms being used, normalisation should be performed beforehand.
  - !ruby/struct:SM::Flow::P 
    body: "CREDIT: Paul Battley"
full_name: String#edit_distance
is_singleton: false
name: edit_distance
params: (str2)
visibility: public
